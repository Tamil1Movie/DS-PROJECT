
Team Member Name: DHUNUSIYA MUTHUKUMARASAMY
Feature Name: Implement Breadth-First Search (BFS) to find friends within certain degrees of separation.
Purpose: 
  To implement a Breadth-First Search (BFS) algorithm for finding friends within certain degrees of separation, you can represent the social network as a graph. Each person is a node, and each friendship is an edge connecting two nodes. BFS is ideal here because it explores each "level" of nodes (or degrees of separation) from the starting person before moving further out.
Preconditions: 
 The preconditions for running the program include ensuring that the network is initialized with a maximum capacity of MAX_USERS (100 users). Users must be added to the network using the addUser() function, and each user must have a unique user_id. Connections between users can only be made if both users already exist in the network, and the connection is bidirectional. When performing BFS, the start_user_id must correspond to a valid user, and the max_degree for BFS must be a non-negative integer. The queue used in BFS should not exceed the capacity of MAX_USERS, and memory allocation for users and connections should succeed. The program also assumes valid menu inputs for user actions, such as adding users, connecting users, and performing BFS.

Implementation Steps:
Define Data Structures: Create structures for users and their connections.
Implement Queue Operations: Implement a queue for BFS traversal.
Add Users and Connections: Implement functions to add users and establish friendships.
Display Network: Create a function to display the current users in the network.
BFS Implementation: Perform BFS to find users within a specific degree of separation.
Input Handling and Menu System: Create a menu system for interacting with the program.
Memory Management: Ensure proper memory management by freeing allocated memory when necessary.
Expected Outcome: 
  The expected outcome of the Breadth-First Search (BFS) implementation for exploring friends within a certain degree of separation is that users can be added to a dynamic network, with connections established between them. The program will list all users currently in the network and, when prompted to perform BFS, will traverse the network starting from a specified user. It will explore all friends within the given degree of separation, printing users along with their respective degrees (e.g., "User X (Degree: 1)"). The BFS will stop once the maximum degree of separation is reached, and the program will ensure no user is visited more than once. The system will handle user input effectively, manage connections, and produce the expected results based on the user's interactions.
Actual Outcome: 
    The actual outcome of the Breadth-First Search (BFS) implementation is that the program successfully allows users to be added to the network with unique IDs, establishes bidirectional connections between users, and displays the list of all users in the network. The BFS function works correctly by starting from a given user and exploring their friends within the specified degree of separation, printing users and their degrees (e.g., "User X (Degree: 1)"). The program handles edge cases such as no users or exceeding the available network connections, ensuring no user is visited more than once and correctly printing results based on the input provided. Overall, it functions as expected, providing accurate traversal and network management.
Status: In Progress
Notes: [Any additional notes or observations]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#define MAX_USERS 100
struct FriendNode
{
    int user_id;
    struct FriendNode* next;
};
struct user
{
    int user_id;
    struct FriendNode* friend_list;
    struct FriendNode* connections;
};
struct user* network[MAX_USERS];
int user_count=0;
struct Queue {
    int items[MAX_USERS];
    int front;
    int rear;
};
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = -1;
    q->rear = -1;
    return q;
}
int isEmpty(struct Queue* q) {
    return q->rear == -1;
}
void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_USERS - 1) return;  // Queue is full
    if (isEmpty(q)) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
}
int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) return -1;
    item = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;  // Reset queue when empty
    }
    return item;
}
struct FriendNode* createConnectionNode(int user_id) {
    struct FriendNode* newNode = (struct FriendNode*)malloc(sizeof(struct FriendNode));
    newNode->user_id = user_id;
    newNode->next = NULL;
    return newNode;
}
struct user* getUserById(int user_id) {
    for (int i = 0; i < user_count; i++) 
    {
        if (network[i]->user_id == user_id) 
        {
            return network[i]; 
        }
    }
    return NULL;
}
void addConnection(int user1_id, int user2_id) {
 struct user* user1 = getUserById(user1_id);
    struct user* user2 = getUserById(user2_id);
    if (user1 == NULL || user2 == NULL) {
        printf("One or both users do not exist. Please add users first.\n");
        return;
    }
    struct FriendNode* newNode1 = createConnectionNode(user2_id);
    newNode1->next = network[user1_id]->connections;
    network[user1_id]->connections = newNode1;
    struct FriendNode* newNode2 = createConnectionNode(user1_id);
    newNode2->next = network[user2_id]->connections;
    network[user2_id]->connections = newNode2;
     printf("Connection established between User %d and User %d.\n", user1_id, user2_id);
}
void BFS(int start_user_id, int max_degree) {
    int visited[MAX_USERS] = {0};        
    int degree[MAX_USERS] = {0};         
    struct Queue* queue = createQueue(); 
    enqueue(queue, start_user_id);
    visited[start_user_id] = 1;
    degree[start_user_id] = 0;
    printf("Users within %d degrees of separation from User %d:\n", max_degree, start_user_id);
    while (!isEmpty(queue)) {
        int current_user_id = dequeue(queue);
        if (degree[current_user_id] >= max_degree) continue;
        struct FriendNode* temp = network[current_user_id]->connections;
        while (temp) {
            int neighbor_id = temp->user_id;
            if (!visited[neighbor_id]) {
                enqueue(queue, neighbor_id);
                visited[neighbor_id] = 1;
                degree[neighbor_id]=degree[current_user_id] + 1;
                if (degree[neighbor_id] <= max_degree) {
                    printf("User %d (Degree: %d)\n", neighbor_id, degree[neighbor_id]);
                }
            }
            temp = temp->next;
        }
    }
    free(queue);
}
struct FriendNode* createFriend(int user_id)
{
    struct FriendNode* newNode=(struct FriendNode*)malloc(sizeof(struct FriendNode));
    newNode->user_id=user_id;
    newNode->next=NULL;
    return newNode;
}
void addUser(int user_id)
{
    int i;
    for(i=0;i<user_count;i++)
    {
         if(network[i]->user_id==user_id)
          {
                printf("User %d is already present in the network",user_id);
          }
    }
    struct user* newUser=(struct user*)malloc(sizeof(struct user));
    newUser->user_id=user_id;
    newUser->friend_list=NULL;
    network[user_count++]=newUser;
    printf("User %d added to the network \n",user_id);
}
void displayNetwork()
{
    int i;
    printf("Current users in the network:\n");
    for(i=0;i<user_count;i++)
    {
            printf("User %d\n",network[i]->user_id);
    }
}
int main()
{
    int choice,user_id,user1_id,user2_id,start_user_id,max_degree;
    while(choice!=6)
    {
          printf("MENU\n");
          printf("1.Add user\n");
          printf("2. Add Connection\n");
          printf("3. Perform BFS\n");
          printf("4.Display the available networks\n");
          printf("5.Exit\n");
          printf("Enter choice :");
          scanf("%d",&choice);
          switch(choice)
          {
                case 1:
                    printf("Enter user id to add in network:");
                    scanf("%d",&user_id);
                    addUser(user_id);
                    break;
                case 2:
                    printf("Enter two User IDs to connect (separated by space): ");
                    scanf("%d%d",&user1_id,&user2_id);
                    addConnection(user1_id,user2_id);
                    break;
                case 3:
                    printf("Enter the starting user ID: ");
                    scanf("%d", &start_user_id);
                    printf("Enter the maximum degree of separation: ");
                    scanf("%d", &max_degree);
                    BFS(start_user_id, max_degree);
                    break;
                case 4:
                    displayNetwork();
                    break;
                case 5:
                    printf("EXIT");
                    return 0;
                default:
                    printf("INVALID CHOICE");
          }
    }
    return 0;
}
